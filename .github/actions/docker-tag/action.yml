name: Docker Tag
description: Tag a Docker image

inputs:
  skip_clean:
    description: Skip removing the .env file before running the action
    required: false
    default: ""
  tag:
    description: The full docker tag to use
    required: true
  registry:
    description: The registry to tag the image with
    required: false
  image:
    description: The image to tag
    required: false
  version:
    description: The version to tag the image with
    required: false
  digest:
    description: The digest to tag the image with
    required: false
  target:
    description: The target to tag the image with
    required: false
  node_env:
    description: The node environment to tag the image with
    required: false

outputs:
  tag:
    description: The full docker tag to use
    value: ${{ steps.tag.outputs.DOCKER_TAG }}
  registry:
    description: The registry to tag the image with
    value: ${{ steps.tag.outputs.DOCKER_REGISTRY }}
  image:
    description: The image to tag
    value: ${{ steps.tag.outputs.DOCKER_IMAGE }}
  version:
    description: The version to tag the image with
    value: ${{ steps.tag.outputs.DOCKER_VERSION }}
  digest:
    description: The digest to tag the image with
    value: ${{ steps.tag.outputs.DOCKER_DIGEST }}
  target:
    description: The target to tag the image with
    value: ${{ steps.tag.outputs.DOCKER_TARGET }}
  node_env:
    description: The node environment to tag the image with
    value: ${{ steps.tag.outputs.NODE_ENV }}

runs:
  using: composite
  steps:
    - name: Extract tag
      id: tag
      shell: bash
      run: |
        if [[ -z "${{ inputs.skip_clean }}" ]]; then
          echo "Removing .env file"
          rm -f .env
        fi

        make scripts env \
          DOCKER_TAG="${{ inputs.tag }}" \
          DOCKER_REGISTRY="${{ inputs.registry }}" \
          DOCKER_IMAGE="${{ inputs.image }}" \
          DOCKER_VERSION="${{ inputs.version }}" \
          DOCKER_DIGEST="${{ inputs.digest }}" \
          DOCKER_TARGET="${{ inputs.target }}" \
          NODE_ENV="${{ inputs.node_env }}"

        while IFS='=' read -r key value; do
          if [[ -n "$value" ]]; then
            # Remove surrounding quotes if present
            value="${value%\"}"
            value="${value#\"}"
            echo "$key=$value" >> "$GITHUB_OUTPUT"
          fi
        done < .env
