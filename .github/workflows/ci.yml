name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  merge_group:

concurrency:
  group: |
    ${{ github.workflow }}-
    ${{ (github.event_name == 'merge_group' || github.event_name == 'push' && github.event.sender.login != 'github-merge-queue[bot]') && 'push' || 'pr' }}
  cancel-in-progress: true

permissions: {}

defaults:
  run:
    shell: bash

env:
  CI: true

jobs:
  context:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      is_fork: ${{ steps.context.outputs.is_fork }}
      push: ${{ steps.push_deploy.outputs.push }}
      deploy: ${{ steps.push_deploy.outputs.deploy }}
    steps:
      - uses: actions/checkout@v4

      - name: Context
        id: context
        uses: ./.github/actions/context

      - name: Push / Deploy
        id: push_deploy
        run: |
          is_fork="${{ steps.context.outputs.is_fork }}"
          event_name="${{ github.event_name }}"
          # The event.sender.login for the user that pushed the commit.
          actor="${{ github.event.sender.login }}"
          # The name of the merge queue bot.
          merge_actor="github-merge-queue[bot]"

          push=false
          deploy=false

          # Push images on merge queue. This only runs on the target repo
          # so no need to check if it is a fork.
          if [[ "$event_name" == "merge_group" ]]; then
            push=true
            deploy=true
          # Push images on push events that were not sent by the merge queue bot
          # as merge queue commits are deployed before the PR is merged.
          elif [[ "$actor" != "$merge_actor" && "$event_name" == "push" && "$is_fork" == "false" ]]; then
            push=true
            deploy=true
          elif [[ "$event_name" == "pull_request" && "$is_fork" == "false" ]]; then
            push=true
          fi

          echo "push=$push" >> $GITHUB_OUTPUT
          echo "deploy=$deploy" >> $GITHUB_OUTPUT
          cat "$GITHUB_OUTPUT"

  version:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' }}
    permissions:
      contents: write
      packages: read
      pull-requests: write
    steps:
      - uses: actions/checkout@v4

      - uses: ./.github/actions/setup-node

      - name: Install
        run: pnpm install:lock

      - name: Build
        run: pnpm build

      - name: Create and publish versions
        uses: changesets/action@v1
        with:
          commit: "chore: update versions"
          title: "chore: update versions"
          publish: pnpm publish:workspace
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

  build:
    needs: context
    permissions:
      packages: write
      contents: read
      attestations: write
      id-token: write
    uses: ./.github/workflows/_build.yml
    secrets: inherit
    with:
      push: ${{ needs.context.outputs.push == 'true' }}

  test:
    needs: [build, context]
    permissions:
      packages: read
      contents: read
    uses: ./.github/workflows/_test.yml
    secrets: inherit
    with:
      tag: ${{ needs.build.outputs.tag }}

  smoketest:
    needs: [context]
    runs-on: ubuntu-latest
    if: ${{ needs.context.outputs.deploy == 'false' }}
    steps:
    - uses: actions/checkout@v4

    - uses: ./.github/actions/setup-node

    - uses: ./.github/actions/setup-docker

    - name: Make up
      uses: ./.github/actions/run-docker
      with:
        run: echo "up"

    - name: Run smoketest
      uses: ./.github/actions/smoketest
      with:
        app_public_url: http://localhost

  deploy:
    name: deploy_${{ matrix.environment }}
    if: ${{ needs.context.outputs.deploy == 'true' }}
    needs: [context, build, test]
    concurrency:
      group: deploy
      cancel-in-progress: false
    strategy:
      fail-fast: true
      matrix:
        environment:
          - stage
          - prod
        service:
          - web
    permissions:
      contents: read
      packages: read
    uses: ./.github/workflows/_deploy.yml
    secrets: inherit
    with:
      environment: ${{ matrix.environment }}
      version: ${{ needs.build.outputs.version }}
      digest: ${{ needs.build.outputs.digest }}
      service: ${{ matrix.service }}

  push:
    needs: [build, context, deploy]
    if: ${{ needs.context.outputs.deploy == 'true' }}
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
      attestations: write
      id-token: write
    steps:
      - uses: actions/checkout@v4

      - uses: ./.github/actions/setup-node

      - uses: ./.github/actions/setup-docker
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Latest Tag
        id: latest_tag
        uses: ./.github/actions/docker-tag
        with:
          registry: ${{ needs.build.outputs.registry }}
          image: ${{ needs.build.outputs.image }}
          version: latest

      - name: Push Image
        run: |
          docker pull ${{ needs.build.outputs.tag }}
          docker tag ${{ needs.build.outputs.tag }} ${{ steps.latest_tag.outputs.tag }}
          docker push ${{ steps.latest_tag.outputs.tag }}

  checks:
    if: always()
    needs: [build, test, smoketest, deploy, push]
    runs-on: ubuntu-latest
    steps:
      - name: Context
        run: |
          cat <<EOF
          ${{ toJson(needs) }}
          EOF

          for key in $(echo '${{ toJson(needs) }}' | jq -r 'keys[]'); do
            job=$(echo '${{ toJson(needs) }}' | jq -r ".[\"$key\"]")
            result=$(echo "$job" | jq -r '.result')
            outputs=$(echo "$job" | jq -r '.outputs')
            if [ "$result" = "failure" ]; then
              echo "Job $key failed with result: $result"
              exit 1
            fi
            echo "Job $key completed with result: $result and outputs: $outputs"
          done

