name: CI
description: 'CI workflow'

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  merge_group:

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: true

permissions: {}

defaults:
  run:
    shell: bash

jobs:
  context:
    runs-on: ubuntu-latest
    outputs:
      is_fork: ${{ steps.context.outputs.is_fork }}
      push: ${{ steps.push.outputs.push }}
    steps:
      - uses: actions/checkout@v4

      - name: Context
        id: context
        uses: ./.github/actions/context

      - name: Push
        id: push
        run: |
          is_fork="${{ steps.context.outputs.is_fork }}"
          event_name="${{ github.event_name }}"
          # The event.sender.login for the user that pushed the commit.
          actor="${{ github.event.sender.login }}"
          # The name of the merge queue bot.
          merge_actor="github-merge-queue[bot]"

          push=false

          # Push images on merge queue. This only runs on the target repo
          # so no need to check if it is a fork.
          if [[ "$event_name" == "merge_group" ]]; then
            push=true
          # Push images on push events that were not sent by the merge queue bot
          # as merge queue commits are deployed before the PR is merged.
          elif [[ "$actor" != "$merge_actor" && "$event_name" == "push" && "$is_fork" == "false" ]]; then
            push=true
          fi

          echo "push=$push" >> $GITHUB_OUTPUT
          cat "$GITHUB_OUTPUT"

  build:
    needs: context
    permissions:
      packages: write
      contents: read
      attestations: write
      id-token: write
    uses: ./.github/workflows/_build.yml
    secrets: inherit
    with:
      push: ${{ needs.context.outputs.push == 'true' }}

  test:
    needs: build
    permissions:
      packages: read
      contents: read
    uses: ./.github/workflows/_test.yml
    with:
      tag: ${{ needs.build.outputs.tag }}
      registry: ${{ needs.build.outputs.registry }}
      username: ${{ needs.build.outputs.username }}
    secrets:
      password: ${{ secrets.GITHUB_TOKEN}}


  deploy_dry:
    runs-on: ubuntu-latest
    needs: [context, test]
    if: ${{ needs.context.outputs.push == 'false' }}
    strategy:
      matrix:
        environment: [stage, prod]
    name: deploy_${{ matrix.environment }} / approve
    steps:
      - name: Deploy dry
        run: |
          echo "Deploying dry"
          echo "Environment: ${{ matrix.environment }}"

  deploy_stage:
    needs: [context, build, test]
    if: ${{ needs.context.outputs.push == 'true' }}
    permissions:
      contents: read
      packages: read
    uses: ./.github/workflows/_deploy.yml
    with:
      environment: stage
      tag: ${{ needs.build.outputs.tag }}

  deploy_prod:
    needs: [context, build, deploy_stage, test]
    if: ${{ needs.context.outputs.push == 'true' }}
    permissions:
      contents: read
      packages: read
    uses: ./.github/workflows/_deploy.yml
    with:
      environment: prod
      tag: ${{ needs.build.outputs.tag }}
