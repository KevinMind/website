name: Comment Action

on:
  issue_comment:
    types: [created]

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: false

permissions: {}

defaults:
  run:
    shell: bash

env:
  CI: true

jobs:
  context:
    runs-on: ubuntu-latest
    outputs:
      is_fork: ${{ steps.context.outputs.is_fork }}
      default_branch: ${{ steps.context.outputs.default_branch }}
      comment_id: ${{ steps.slash_command.outputs.comment_id }}
      issue_number: ${{ steps.slash_command.outputs.issue_number }}
      slash_command: ${{ steps.slash_command.outputs.slash_command }}
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4

      - name: Context
        id: context
        uses: ./.github/actions/context


      - name: Extract slash command
        id: slash_command
        env:
          comment_id: ${{ github.event.comment.id }}
          issue_number: ${{ github.event.issue.number }}
          raw_comment: ${{ github.event.comment.body }}
        run: |
          echo "Extracting slash command from comment"

          # If the comment is NOT a slash command, skip everything
          if ! [[ $raw_comment =~ ^/ ]]; then
            echo "No slash command detected, skipping"
            exit 0
          fi

          # Identify a valid slash command
          if [[ "$raw_comment" == "/deploy" ]]; then
            echo "Deploy command detected"
            slash_command="deploy"
          elif [[ "$raw_comment" == "/rebase" ]]; then
            echo "Rebase command detected"
            slash_command="rebase"
          else
            echo "No command identified for slash command input: "$raw_comment""
            slash_command="unknown"
          fi

          echo "comment_id=${comment_id}" >> $GITHUB_OUTPUT
          echo "issue_number=${issue_number}" >> $GITHUB_OUTPUT
          echo "raw_comment=${raw_comment}" >> $GITHUB_OUTPUT
          echo "slash_command=${slash_command}" >> $GITHUB_OUTPUT
          cat "${GITHUB_OUTPUT}"

  pre_process:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write
      pull-requests: write
    needs: context
    if: |
      needs.context.outputs.is_fork == 'false' &&
      needs.context.outputs.slash_command != ''
    steps:
      - name: React to valid slash command
        if: ${{ needs.context.outputs.slash_command != 'unknown' }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          repo: ${{ github.repository }}
          comment_id: ${{ needs.context.outputs.comment_id }}
        run: |
          gh api \
            --method POST \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "/repos/${repo}/issues/comments/${comment_id}/reactions" \
            -f "content=eyes"

      - name: Reply to unknown slash command with help text
        if: ${{ needs.context.outputs.slash_command == 'unknown' }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          repo: ${{ github.repository }}
          slash_command: ${{ needs.context.outputs.slash_command }}
          issue_number: ${{ needs.context.outputs.issue_number }}
        run: |
          cat <<EOF > comment.txt
          Unidentified slash command \`${slash_command}\` received.

          Please use one of the following commands:
          - **/deploy** - Deploy the latest version of the code to dev
          - **/rebase** - Rebase the current branch with the main branch
          EOF

          gh api \
            --method POST \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "/repos/${repo}/issues/${issue_number}/comments" \
            -f "body=$(cat comment.txt)"

  rebase:
    permissions:
      contents: write
      pull-requests: write
    runs-on: ubuntu-latest
    needs: [context, pre_process]
    if: ${{ needs.context.outputs.slash_command == 'rebase' }}
    steps:
      - name: Update branch
        env:
          repo: ${{ github.repository }}
          issue_number: ${{ needs.context.outputs.issue_number }}
        run: |
          gh pr update-branch --rebase

  post_process:
    permissions:
      contents: read
      issues: write
      pull-requests: write
    runs-on: ubuntu-latest
    needs: [context, pre_process, rebase]
    if: always()
    steps:
      - name: Finalize issue comment reaction
        if: ${{ needs.context.outputs.slash_command != 'unknown' }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          repo: ${{ github.repository }}
          comment_id: ${{ needs.context.outputs.comment_id }}
          failure: ${{ contains(needs.*.result, 'failure') }}
        run: |
          if [ "$failure" = "true" ]; then
            content="-1"
          else
            content="+1"
          fi

          gh api \
            --method POST \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "/repos/${repo}/issues/comments/${comment_id}/reactions" \
            -f "content=${content}"
