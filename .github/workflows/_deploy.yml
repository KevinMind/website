name: Deploy

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'The version to deploy'
        required: true
        type: string
      digest:
        description: 'The digest to deploy'
        required: false
        type: string
      service:
        description: 'The service to deploy'
        required: true
        type: choice
        options:
          - web
      environment:
        description: 'The environment to deploy to'
        required: true
        type: choice
        options:
          - stage
          - prod

  workflow_call:
    inputs:
      version:
        description: 'The version to deploy'
        required: true
        type: string
      digest:
        description: 'The digest to deploy'
        required: false
        type: string
      service:
        description: 'The service to deploy'
        required: true
        type: string
      environment:
        description: 'The environment to deploy to'
        required: true
        type: string

    outputs:
      deploy_tag:
        description: the tag that was (attempted to be) deployed
        value: ${{ jobs.deploy.outputs.push_tag }}
      rollback:
        description: The JSON output from the /__version__ endpoint of the previous deployment
        value: ${{ jobs.deploy.outputs.rollback_meta }}

permissions: {}

defaults:
  run:
    shell: bash

concurrency:
  group: |
    deploy-
    ${{ inputs.environment }}-
    ${{ inputs.service }}
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    outputs:
      pull_tag: ${{ steps.pull_tag.outputs.tag }}
      push_tag: ${{ steps.push_tag.outputs.tag }}
      rollback_meta: ${{ steps.rollback_meta.outputs.json }}
    steps:
      - uses: actions/checkout@v4

      - uses: ./.github/actions/setup-node

      - uses: ./.github/actions/setup-docker
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Flyctl
        uses: superfly/flyctl-actions/setup-flyctl@master

      - name: Pull Tag
        id: pull_tag
        uses: ./.github/actions/docker-tag
        with:
          registry: ghcr.io
          image: ${{ github.repository }}
          version: ${{ inputs.version }}
          digest: ${{ inputs.digest }}

      - name: Push Tag
        id: push_tag
        uses: ./.github/actions/docker-tag
        with:
          registry: registry.fly.io
          image: ${{ vars.APP_NAME }}
          version: ${{ steps.pull_tag.outputs.version }}

      - name: Login to Fly
        run: flyctl auth docker
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

      - name: Push image
        run: |
          pull_tag="${{ steps.pull_tag.outputs.tag }}"
          push_tag="${{ steps.push_tag.outputs.tag }}"

          docker pull $pull_tag
          docker tag $pull_tag $push_tag
          docker push $push_tag

      - name: Rollback Metadata
        continue-on-error: true
        id: rollback_meta
        run: |
          public_url="${{ vars.APP_PUBLIC_URL }}"
          url="${public_url}/__version__"
          json=$(curl -s --max-time 30 ${url})
          echo "json=${json}" >> "$GITHUB_OUTPUT"
          cat "$GITHUB_OUTPUT"

      - name: Deploy to Fly
        run: |
          flyctl deploy \
            --config docker/fly-${{ vars.APP_NAME }}.toml \
            --image "${{ steps.push_tag.outputs.tag }}" \
            --env SERVICE_NAME="${{ inputs.service }}"
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

      - name: Wait for deployment
        timeout-minutes: 10
        run: |
          public_url="${{ vars.APP_PUBLIC_URL }}"
          url="${public_url}/__version__"
          wait_time=10
          waiting=true

          echo "Waiting for deployment to be ready"

          while $waiting; do
            version=$(curl -s --max-time 30 ${url} | jq -r '.version // empty' || echo "")
            if [ "$version" = "${{ steps.push_tag.outputs.version }}" ]; then
              waiting=false
            else
              echo "Tag '${tag}' does not match '${{ steps.push_tag.outputs.tag }}'"
              sleep "${wait_time}"
            fi
          done
          echo "Deployment is ready"

      - name: Run smoke test
        uses: ./.github/actions/smoketest
        with:
          app_public_url: ${{ vars.APP_PUBLIC_URL }}

  approve:
    if: ${{ always() && needs.deploy.result == 'success' }}
    needs: [deploy]
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    steps:
      - name: Wait for approval
        run: echo "Waiting for approval"

