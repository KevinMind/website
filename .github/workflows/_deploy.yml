name: Deploy

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'The version to deploy'
        required: true
        type: string
      digest:
        description: 'The digest to deploy'
        required: false
        type: string
      environment:
        description: 'The environment to deploy to'
        required: true
        type: choice
        options:
          - stage
          - prod

  workflow_call:
    inputs:
      version:
        description: 'The version to deploy'
        required: true
        type: string
      digest:
        description: 'The digest to deploy'
        required: false
        type: string
      environment:
        description: 'The environment to deploy to'
        required: true
        type: string

    outputs:
      deploy_tag:
        description: the tag that was (attempted to be) deployed
        value: ${{ jobs.deploy.outputs.push_tag }}
      rollback:
        description: The JSON output from the /__version__ endpoint of the previous deployment
        value: ${{ jobs.deploy.outputs.rollback_meta }}

permissions: {}

defaults:
  run:
    shell: bash

concurrency:
  group: deploy
  cancel-in-progress: false

jobs:
  app_names:
    runs-on: ubuntu-latest
    outputs:
      app_names: ${{ steps.app_names.outputs.app_names }}
    steps:
      - uses: actions/checkout@v4

      - name: Set App Names
        id: app_names
        env:
          environment: ${{ inputs.environment }}
        run: |
          base_dir="docker/fly/"
          app_names=()

          for entry in "${base_dir}"nopo-${environment}-*.toml; do
            app_names+=("$(basename "${entry}" .toml)")
          done

          # Convert the app_names array to a compact JSON array for use in GitHub Actions matrix
          # printf '%s\n' outputs each service on a new line
          # jq -R . reads each line as a raw string and wraps it in JSON quotes
          # jq -s . slurps all the quoted strings into a single JSON array
          # jq -c . compacts the JSON output (removes whitespace)
          json_app_names=$(printf '%s\n' "${app_names[@]}" | jq -R . | jq -s . | jq -c .)

          echo "app_names=${json_app_names}" >> "$GITHUB_OUTPUT"
          cat "$GITHUB_OUTPUT"

  pre_approve:
    name: Pre-Approve deployments for (${{ needs.app_names.outputs.app_names }})
    needs: [app_names]
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    outputs:
      pull_tag: ${{ steps.pull_tag.outputs.tag }}
      pull_version: ${{ steps.pull_tag.outputs.version }}
    steps:
      - uses: actions/checkout@v4

      - uses: ./.github/actions/setup-node

      - uses: ./.github/actions/setup-docker
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull Tag
        id: pull_tag
        uses: ./.github/actions/docker-tag
        with:
          registry: ghcr.io
          image: ${{ github.repository }}
          version: ${{ inputs.version }}
          digest: ${{ inputs.digest }}

  deploy:
    runs-on: ubuntu-latest
    needs: [app_names, pre_approve]
    timeout-minutes: 10
    concurrency:
      group: deploy-job
    strategy:
      matrix:
        app_name: ${{ fromJson(needs.app_names.outputs.app_names) }}
    outputs:
      push_tag: ${{ steps.push_tag.outputs.tag }}
      rollback_meta: ${{ steps.deploy.outputs.rollback_meta }}
      deployed: ${{ steps.deploy.outcome == 'success' }}
      app_name: ${{ matrix.app_name }}
    steps:
      - uses: actions/checkout@v4

      - uses: ./.github/actions/setup-node

      - uses: ./.github/actions/setup-docker
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push Tag
        id: push_tag
        uses: ./.github/actions/docker-tag
        with:
          registry: registry.fly.io
          image: ${{ matrix.app_name }}
          version: ${{ needs.pre_approve.outputs.pull_version }}

      - name: Setup Flyctl
        uses: superfly/flyctl-actions/setup-flyctl@master

      - name: Login to Fly
        run: flyctl auth docker
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

      - name: Push image
        env:
          pull_tag: ${{ needs.pre_approve.outputs.pull_tag }}
          push_tag: ${{ steps.push_tag.outputs.tag }}
        run: |
          docker pull "${pull_tag}"
          docker tag "${pull_tag}" "${push_tag}"
          docker push "${push_tag}"

      - name: Deploy to Fly
        id: deploy
        uses: ./.github/actions/deploy
        with:
          token: ${{ secrets.FLY_API_TOKEN }}
          image: ${{ steps.push_tag.outputs.tag }}
          app_name: ${{ matrix.app_name }}
          version: ${{ steps.push_tag.outputs.version }}

      - name: Run smoke test
        uses: ./.github/actions/smoketest
        with:
          public_url: ${{ steps.deploy.outputs.public_url }}

  approve:
    if: ${{ always() && needs.deploy.result == 'success' }}
    needs: [deploy]
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    steps:
      - name: Wait for approval
        run: echo "Waiting for approval"

  rollback:
    if: |
      always() &&
      needs.deploy.outputs.rollback_meta != '' &&
      needs.deploy.outputs.deployed == 'true' &&
      (needs.deploy.result != 'success'|| needs.approve.result != 'success')
    name: Rollback
    needs: [app_names, deploy, approve]
    runs-on: ubuntu-latest
    timeout-minutes: 10
    environment: ${{ inputs.environment }}
    strategy:
      matrix: ${{ fromJson(needs.app_names.outputs.app_names) }}
    steps:
      - uses: actions/checkout@v4

      - uses: ./.github/actions/setup-node

      - name: Rollback tag
        id: rollback_tag
        uses: ./.github/actions/docker-tag
        with:
          tag: ${{ fromJson(needs.deploy.outputs.rollback_meta).tag }}

      - name: Setup Flyctl
        uses: superfly/flyctl-actions/setup-flyctl@master

      - name: Rollback
        id: deploy
        uses: ./.github/actions/deploy
        with:
          token: ${{ secrets.FLY_API_TOKEN }}
          image: ${{ steps.rollback_tag.outputs.tag }}
          version: ${{ steps.rollback_tag.outputs.version }}
          service: ${{ matrix.service }}
          environment: ${{ inputs.environment }}

      - name: Run smoke test
        uses: ./.github/actions/smoketest
        with:
          public_url: ${{ steps.deploy.outputs.public_url }}



